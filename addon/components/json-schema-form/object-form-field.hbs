<fieldset ...attributes>
  {{#if this.isDefaultFormat}}
    {{#if @dataSchema.title}}
      <legend>{{@dataSchema.title}}</legend>
    {{/if}}
    {{#if @dataSchema.description}}
      <p>{{@dataSchema.description}}</p>
    {{/if}}
    {{#each this.formFieldArgsList as |formFieldArgs|}}
      <JsonSchemaForm::FormField
        @data={{formFieldArgs.data}}
        @dataSchema={{formFieldArgs.dataSchema}}
        @formId={{@formId}}
        @elementSchema={{formFieldArgs.elementSchema}}
        @onValueChange={{formFieldArgs.onValueChange}}
        @onValueInitialized={{formFieldArgs.onValueInitialized}}
      />
    {{/each}}
  {{else}}
    {{! TODO: Implement support for invoking widget based on format }}
    {{#let this.widget as |widget|}}
      <widget
        @description={{@dataSchema.description}}
        @name={{this.formElementName}}
        @onValueChange={{@onValueChange}}
        @title={{@dataSchema.title}}
        @value={{@data}}
        ...attributes/>
    {{/let}}
  {{/if}}
</fieldset>